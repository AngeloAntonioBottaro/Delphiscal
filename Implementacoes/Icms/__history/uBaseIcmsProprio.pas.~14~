unit uBaseIcmsProprio;

interface

type
  TBaseIcmsProprio = class
  private
    FvalorProduto: currency;
    Fvalorfrete: currency;
    FvalorSeguro: currency;
    FdespesasAcessorias: currency;
    FvalorIpi: currency;
    FvalorDesconto: currency;
    FpercentualReducao: currency;

  public
    property ValorProduto: currency read FvalorProduto;
    property ValorFrete: currency read Fvalorfrete;
    property ValorSeguro: currency read FvalorSeguro;
    property DespesasAcessorias: currency read FdespesasAcessorias;
    property ValorIpi: currency read FvalorIpi write FvalorIpi;
    property ValorDesconto: currency read FvalorDesconto;
    property PercentualReducao: currency read FpercentualReducao;
    function CalcularBaseIcmsProprio: currency;

    Constructor Create(_valorProduto, _valorFrete, _valorSeguro,
      _despesasAcessorias, _valorDesconto: currency; _percentualReducao: currency = 0;
      _valorIpi: currency = 0);

  end;

implementation

uses acbrutil.math;

{ TBaseIcmsProprio }

constructor TBaseIcmsProprio.Create(_valorProduto, _valorFrete, _valorSeguro,
  _despesasAcessorias, _valorDesconto: currency;   _percentualReducao: currency;
  _valorIpi: currency);
begin
  FvalorProduto := _valorProduto;
  Fvalorfrete := _valorFrete;
  FvalorSeguro := _valorSeguro;
  FdespesasAcessorias := _despesasAcessorias;
  FvalorDesconto := _valorDesconto;
  FvalorIpi := _valorIpi;
  FpercentualReducao := _percentualReducao;

end;

function TBaseIcmsProprio.CalcularBaseIcmsProprio: currency;
var
  baseIcms: currency;
begin
  if (PercentualReducao > 0) then
  begin
    baseIcms := RoundABNT(ValorProduto + ValorFrete + ValorSeguro +
      DespesasAcessorias - ValorDesconto, 2);

    result := RoundABNT((baseIcms - (baseIcms * (PercentualReducao / 100)) +
      ValorIpi), 2);
  end
  else
    result := RoundABNT(ValorProduto + ValorFrete + ValorSeguro +
      DespesasAcessorias + ValorIpi - ValorDesconto, 2);
end;

end.
