unit uBaseIcmsST;

interface

uses
  uBaseIcmsProprio;

type
  TBaseIcmsST = class
  private
    FBaseIcmsProprio: TBaseIcmsProprio;
    FPercentualReducaoST: currency;
    FMva: currency;
    FValorIpi: currency;
  public
    constructor Create(_baseIcmsProprio: TBaseIcmsProprio;
                       _mva: currency;
                       _percentualReducaoST: currency = 0;
                       _valorIpi: currency = 0);
    function CalcularBaseIcmsST: currency;

  end;

implementation

uses
  acbrutil;

{ TBaseIcmsST }

function TBaseIcmsST.CalcularBaseIcmsST: currency;
var
  baseIcmsST: currency;
begin
  if(FPercentualReducaoST > 0) then
  begin
    baseIcmsST := RoundABNT((FBaseIcmsProprio.CalcularBaseIcmsProprio) *
                             (1 + (FMva / 100)), 2);

    Result := RoundABNT((baseIcmsST -
                        (baseIcmsST * (FPercentualReducaoST / 100)) +
                        FValorIpi), 2);

  end
  else
    Result := RoundABNT((FBaseIcmsProprio.CalcularBaseIcmsProprio + FValorIpi) *
                        (1 + (FMva / 100)), 2);
end;

constructor TBaseIcmsST.Create(_baseIcmsProprio: TBaseIcmsProprio;
                               _mva,
                               _percentualReducaoST,
                               _valorIpi: currency);
begin
  FBaseIcmsProprio := _baseIcmsProprio;
  FMva := _mva;
  FPercentualReducaoST := _percentualReducaoST;
  FValorIpi := _valorIpi;
end;

end.
