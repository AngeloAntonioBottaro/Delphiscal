unit uValorIcms;

interface

uses uBaseIcmsProprio;

type
  TValorIcms = class
  private
    FBaseIcms: TBaseIcmsProprio;
    FAliquotaIcms: currency;
    function GetValorIcms: currency;

  public
      destructor Destroy; override;
    property AliquotaIcms: currency read FaliquotaIcms write FaliquotaIcms;
    property ValorIcmsProprio: currency read GetValorIcms;

    Constructor Create(_baseIcmsProprio: TBaseIcmsProprio;
                       _aliquotaIcmsProprio: currency);


  end;

implementation

uses acbrutil.Math;

{ TValorIcms }

constructor TValorIcms.Create(_baseIcmsProprio: TBaseIcmsProprio;
                              _aliquotaIcmsProprio: currency);
begin
  FBaseIcms := _baseIcmsProprio;
  AliquotaIcms := _aliquotaIcmsProprio;

end;

function TValorIcms.GetValorIcms: currency;
begin
  result := RoundABNT((FBaseIcms.CalcularBaseIcmsProprio * (AliquotaIcms/100) ),2);
end;

end.
