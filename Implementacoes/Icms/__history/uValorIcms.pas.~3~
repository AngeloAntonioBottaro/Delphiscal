unit uValorIcms;

interface

uses uBaseIcmsProprio;

type
  TValorIcms = class
  private
    FbaseIcms: TBaseIcmsProprio;
    FaliquotaIcms: currency;
    function GetValorIcms: currency;

  public
    property BaseIcmsProprio: TBaseIcmsProprio read FbaseIcms write FbaseIcms;
    property AliquotaIcms: currency read FaliquotaIcms write FaliquotaIcms;
    property ValorIcms: currency read GetValorIcms;
    function teste: currency;

    Constructor Create(_baseIcmsProprio: TBaseIcmsProprio;
      _aliquotaIcmsProprio: currency);

  end;

implementation

uses acbrutil.Math;

{ TValorIcms }

constructor TValorIcms.Create(_baseIcmsProprio: TBaseIcmsProprio;
  _aliquotaIcmsProprio: currency);
begin
  FbaseIcms := _baseIcmsProprio;
  AliquotaIcms := _aliquotaIcmsProprio;

end;

function TValorIcms.GetValorIcms: currency;
begin
  result := RoundABNT((BaseIcmsProprio.BaseIcmsProprio * (AliquotaIcms/100) ),2);
end;

function TValorIcms.teste: currency;
begin

end;

end.
